<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Your Title - Running Lean</title>
 <link href="http://giantech.jp/tags/running-lean.xml" rel="self"/>
 <link href="http://giantech.jp/tag/Running Lean.html"/>
 <updated>2015-12-11T23:52:15+09:00</updated>
 <id>http://giantech.jp/tags/Running Lean.html</id>
 <author>
   <name>Author Here</name>
 </author>
 
 <entry>
   <title>価値提案駆動 -- TDDとの類似点</title>
   <link href="http://giantech.jp/2013/04/05/value-proposition-driven"/>
   <updated>2013-04-05T08:59:59+09:00</updated>
   <id>http://giantech.jp/2013/04/05/value-proposition-driven</id>
   <content type="html">
&lt;h3 id=&quot;section&quot;&gt;概要&lt;/h3&gt;

&lt;p&gt;Lean Startupで知られるようになってきたMVP(Minimum Viable Product: 最小限の実用可能な製品)と、Running Leanで提唱されている独自の価値提案(Unique Value Proposition: UVP)について、ソリューション(どう実現するか)よりも先にUVPを先に考えMVPによって早期から検証を繰り返しながらプロダクトを構築していくプロセスが、ソフトウェア開発におけるTDD(Test Driven Development : テスト駆動開発)におけるテストを先に書いて、実装して、リファクタリングするというプロセスに似ているのではないかと考えた。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;本文&lt;/h3&gt;

&lt;p&gt;最近、Running Leanのワークショップを@kdmsnrさんと一緒に開催したり、実際に自分でリーンキャンバスを書く機会が増えたため、ソリューションより先に独自の価値提案(UVP)を先に考えることに慣れてきた。これまでにも「プロダクトのビジョン、コンセプト」を先に考えるということはしてきたが、今考えてみると、ソリューションを先に思いつき、それに合わせて価値提案を作っていたのでは？という気がしてならない。&lt;/p&gt;

&lt;p&gt;先にUVPを考えるということは ，はじめにゴールを達成した後の状態である「誰にどのような素晴しい未来が待っているのか」を考えることだ。
UVPを考えその後にUVPを満たすソリューションを作りあげていくプロセスは、TDDと同様に，ゴールを設定してからそこに向う道を進んでいくという点で似ている。逆に言うと「はじめにソリューションありきのプロダクトづくり」は&lt;strong&gt;プロダクトコードありきのテストと同じ&lt;/strong&gt;ということだ。&lt;/p&gt;

&lt;p&gt;またゴール設定という意味で考えても、仕様的ゴール(=XXX という機能があって、このような条件を満たしている)ではなく、プロダクトを受け取った人がどのように感じ、どのように利益を得るのかという、&lt;strong&gt;ユーザー体験的ゴール&lt;/strong&gt;という点が重要だ。&lt;/p&gt;

&lt;p&gt;UVPとTDDと比較して異なる点は、あくまでもUVPそのものが仮説であるという点だ。いくらUVPを満たすソリューションをもつ製品を作ったとしても、それが顧客にとって正しいプロダクトかどうかは作る段階ではわからない。もちろんTDDが満たそうとするゴール(=テスト)もその後のプロダクトへのフィードバックの結果によって変わりうる。結局ある時点でのゴールと考えるものは、どれもこれも「いずれ変更される可能性はある当面のゴール」でしかないということに気づく。&lt;/p&gt;

&lt;p&gt;ここで「Validation(正しく製品を作っているか）」と「Verification(正しい製品を作っているか)」の違いについて思い出した。(参考:&lt;a href=&quot;http://lise.me.sophia.ac.jp/kktm/Essay/validation_verification.htm&quot;&gt;validation and verification: 確認と検証&lt;/a&gt;)
UVPを検証するという行為は、「正しい製品」を探索することに等しい。「「正しい製品」が正しいか」を最初から定義することはできない。だから、早くUVP(を含めたビジネスモデル)が対象顧客にとって正しいものか(=価値のあるものか)という仮説を、MVPを使って検証しないといけない。そのためUVPが価値があるものらしいという手応えを感じるまでは、作り込んではいけない。なぜなら&lt;strong&gt;UVPが正しくなければ作ったものがムダになる&lt;/strong&gt;ためだ。TDDにおいても、まずはテストを満たすシンプルなコードを書き、テストをパスさせた上でリファクタリングする。テストを満たす最小限のコード(仮にMinimum Viable Codeと呼ぶ)は、最初にUVPを実現し検証するMVPに類似しているのではないか。&lt;/p&gt;

&lt;p&gt;MVPについて考えた時には&lt;a href=&quot;https://sites.google.com/site/techdmba/kanomodel&quot;&gt;狩野モデル&lt;/a&gt;における当たり前品質(あっても魅力にはならないが、なければ困る機能)はどうなるのか、という疑問が生じる。言い換えると「MVPに当たり前品質のフィーチャが必要か？」という疑問である。これはMVPの種類にもよるが、できるだけ「作らないようにする」のがよいだろう。MVPで検証したいのは、&lt;strong&gt;魅力品質を満たす(であろうという未踏の仮説)&lt;/strong&gt;フィーチャであるからだ。MVPを構築する上で、当たり前品質の機能を作らないといけない、という状況もあるかもしれない。その場合は「できるだけ作らないで検証できるMVPはどのようなものか？」という問いに変えたほうがよい。&lt;/p&gt;

&lt;p&gt;TDDにおいても、コードの当たり前品質をプログラマーにとっての当たり前品質として考えるとクリーンコード(リーダブル、DRY、etc)やカバレッジのようなものになるのではないか。TDDでまず検証したいのはクリーンコードではなくテストを満たしているかどうかだ。(これをプログラマー的な魅力的品質と呼ぶのはちょっと抵抗があるが,…)&lt;/p&gt;

&lt;p&gt;まとめると、まず最優先で検証したい事柄(仮説)を設定し、それを検証するために最低限の実現方法を用いて実現し、その成果の結果を測定して、実現内容をブラッシュアップしていくか、次の仮説検証に取り組むかの判断を行うという仮説検証プロセスモデルは、コードレベルからプロダクト/サービスレベルにまで通じるプロセスモデルである、という話でした。&lt;/p&gt;

&lt;iframe src=&quot;http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=giantech-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=ss_til&amp;amp;asins=4873115914&quot; style=&quot;width:120px;height:240px;&quot; scrolling=&quot;no&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
</feed>